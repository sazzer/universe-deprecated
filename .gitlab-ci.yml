stages:
  - build
  - e2e
  - deploy

build-service:
  stage: build
  image: rustlang/rust:nightly-slim

  services:
    - docker:19.03.1-dind

  variables:
    DOCKER_HOSTNAME: docker
    DOCKER_HOST: tcp://$DOCKER_HOSTNAME:2375
    DOCKER_DRIVER: overlay2
    CARGO_HOME: $CI_PROJECT_DIR/service/.cargo
    RUST_LOG: debug

  before_script:
    - apt update
    - apt -y install apt-transport-https ca-certificates curl gnupg2 software-properties-common
    - curl -fsSL https://download.docker.com/linux/debian/gpg | apt-key add -
    - add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/debian $(lsb_release -cs) stable"
    - apt update
    - apt -y install docker-ce-cli pkg-config libssl-dev

  script:
    - cd service
    - cargo test

  cache:
    key: universe-service
    paths:
      - service/.cargo

build-service-container:
  stage: build
  image: docker:stable

  services:
    - docker:19.03.1-dind

  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_DRIVER: overlay2
    IMAGE_TAG: $CI_REGISTRY/sazzer/universe/universe-service

  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull $IMAGE_TAG:builder-$CI_COMMIT_REF_SLUG || true

  script:
    - cd service
    - docker build -t $IMAGE_TAG:builder-$CI_COMMIT_REF_SLUG --target builder --cache-from $IMAGE_TAG:builder-$CI_COMMIT_REF_SLUG .
    - docker build -t $IMAGE_TAG:latest-$CI_COMMIT_REF_SLUG --cache-from $IMAGE_TAG:builder-$CI_COMMIT_REF_SLUG .
    - docker push $IMAGE_TAG:builder-$CI_COMMIT_REF_SLUG
    - docker push $IMAGE_TAG:latest-$CI_COMMIT_REF_SLUG

build-webapp:
  stage: build
  image: node:13.7.0

  before_script:
    - cd webapp
    - yarn install

  script:
    - yarn test
    - yarn build

  cache:
    key: universe-webapp
    paths:
      - webapp/node_modules

  artifacts:
    paths:
      - webapp/build

build-webapp-container:
  stage: build
  image: docker:stable

  services:
    - docker:19.03.1-dind

  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_DRIVER: overlay2
    IMAGE_TAG: $CI_REGISTRY/sazzer/universe/universe-webapp

  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull $IMAGE_TAG:builder-$CI_COMMIT_REF_SLUG || true

  script:
    - cd webapp
    - docker build -t $IMAGE_TAG:builder-$CI_COMMIT_REF_SLUG --target builder --cache-from $IMAGE_TAG:builder-$CI_COMMIT_REF_SLUG .
    - docker build -t $IMAGE_TAG:latest-$CI_COMMIT_REF_SLUG --cache-from $IMAGE_TAG:builder-$CI_COMMIT_REF_SLUG .
    - docker push $IMAGE_TAG:builder-$CI_COMMIT_REF_SLUG
    - docker push $IMAGE_TAG:latest-$CI_COMMIT_REF_SLUG

build-e2e-container:
  stage: build
  image: docker:stable

  services:
    - docker:19.03.1-dind

  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_DRIVER: overlay2
    IMAGE_TAG: $CI_REGISTRY/sazzer/universe/universe-e2e

  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull $IMAGE_TAG:latest-$CI_COMMIT_REF_SLUG || true

  script:
    - cd e2e
    - docker build -t $IMAGE_TAG:latest-$CI_COMMIT_REF_SLUG --cache-from $IMAGE_TAG:latest-$CI_COMMIT_REF_SLUG .
    - docker push $IMAGE_TAG:latest-$CI_COMMIT_REF_SLUG

run-e2e:
  stage: e2e
  image: docker/compose:latest

  services: 
    - docker:19.03.1-dind

  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_DRIVER: overlay2
    SERVICE_TAG: $CI_REGISTRY/sazzer/universe/universe-service
    WEBAPP_TAG: $CI_REGISTRY/sazzer/universe/universe-webapp
    E2E_TAG: $CI_REGISTRY/sazzer/universe/universe-e2e

  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull $SERVICE_TAG:latest-$CI_COMMIT_REF_SLUG
    - docker pull $WEBAPP_TAG:latest-$CI_COMMIT_REF_SLUG
    - docker pull $E2E_TAG:latest-$CI_COMMIT_REF_SLUG
    - docker tag $SERVICE_TAG:latest-$CI_COMMIT_REF_SLUG universe-service
    - docker tag $WEBAPP_TAG:latest-$CI_COMMIT_REF_SLUG universe-webapp
    - docker tag $E2E_TAG:latest-$CI_COMMIT_REF_SLUG universe-e2e
    - mkdir -p /universe/output

  script:
    - docker-compose -f docker-compose.e2e.yml -f docker-compose.services.yml up --exit-code-from universe-e2e-tests

  retry:
    max: 2
    when: always

  artifacts:
    name: '$CI_COMMIT_REF_SLUG-Cucumber'
    paths:
      - output/*
    when: always

deploy-webapp:
  stage: deploy
  image: node:13.7.0

  only:
    refs:
      - master

  variables:
    NETLIFY_SITE_ID: 5d660fa7-9244-4b03-84d5-9a7fdf547b65
    SERVICE_URL: https://universe-cd.herokuapp.com/

  before_script:
    - npm install -g netlify-cli
    - apt-get update && apt-get install -y gettext-base
    - cd webapp

  script:
    - cat ./build/config.js.template | envsubst > ./build/config.js
    - |-
      netlify deploy --prod --dir=build --site=$NETLIFY_SITE_ID -m "CI Deploy: $CI_PIPELINE_ID"

deploy-openapi:
  stage: deploy
  image: node:13.7.0

  only:
    refs:
      - master

  variables:
    NETLIFY_SITE_ID: bac0a2a1-ab23-4262-976d-d58aaa3bb275

  before_script:
    - npm install -g netlify-cli redoc-cli
    - cd api

  script:
    - |-
      mkdir build
      cp reference/universe.v1.yaml build
      redoc-cli bundle ./reference/universe.v1.yaml
      mv redoc-static.html build/index.html
      netlify deploy --prod --dir=build --site=$NETLIFY_SITE_ID -m "CI Deploy: $CI_PIPELINE_ID"

deploy-service:
  stage: deploy
  image: docker:stable
  services:
    - docker:19.03.1-dind

  only:
    refs:
      - master

  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_DRIVER: overlay2
    SOURCE_TAG: $CI_REGISTRY/sazzer/universe/universe-service
    TARGET_APP: universe-cd

  before_script:
    - docker pull $SOURCE_TAG:latest-$CI_COMMIT_REF_SLUG
    - apk add --no-cache curl
  script:
    - docker login --username=graham@grahamcox.co.uk --password=$HEROKU_API_KEY registry.heroku.com
    - docker tag $SOURCE_TAG:latest-$CI_COMMIT_REF_SLUG registry.heroku.com/$TARGET_APP/web
    - docker push registry.heroku.com/$TARGET_APP/web
    - docker inspect registry.heroku.com/$TARGET_APP/web:latest --format={{.Id}} > /tmp/imageid
    - |-
      curl -X PATCH https://api.heroku.com/apps/$TARGET_APP/formation --header "Content-Type: application/json" --header "Accept: application/vnd.heroku+json; version=3.docker-releases" --user graham@grahamcox.co.uk:${HEROKU_API_KEY} --data '{ "updates": [ { "type": "web", "docker_image": "'$(cat /tmp/imageid)'" } ] }'

